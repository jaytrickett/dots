"set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()


Plugin 'VundleVim/Vundle.vim'

"Managed by Vundle
"Plugin 'bling/vim-airline.git'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
"Plugin 'powerline/fonts.git'
Plugin 'altercation/vim-colors-solarized.git'
Plugin 'jonathanfilip/vim-lucius.git'
Plugin 'Valloric/YoucompleteMe'
Plugin 'vim-scripts/BufOnly.vim'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'ervandew/supertab'
Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'tpope/vim-fugitive'
Plugin 'rhysd/npm-filetypes.vim'
Plugin 'Shutnik/jshint2.vim'
Plugin 'sukima/xmledit'
Plugin 'Raimondi/delimitMate'
Plugin 'gregsexton/gitv'
Plugin 'airblade/vim-gitgutter'
Plugin 'vim-syntastic/syntastic'
Plugin 'fatih/vim-go'
Plugin 'scrooloose/nerdcommenter'
Plugin 'flazz/vim-colorschemes'
"Plugin 'felixhummel/setcolors.vim'


call vundle#end()

filetype plugin indent on
runtime macros/matchit.vim
"set termguicolors
set encoding=utf-8
set t_Co=256
set relativenumber
set number
set ruler
set wildmenu
set ai
set si
set wrap
set ignorecase
set hlsearch
set showmatch
set nobackup
set nowb
set noswapfile
set autoread
set incsearch
syntax enable
set tabstop=4
set softtabstop=4
set shiftwidth=4
set noexpandtab
set pastetoggle=<F2>

	
"Custom Key-Bindings

"Remap leader to ,
let mapleader=","

"Leader f toggle NerdTree
noremap <silent> <leader>f		:NERDTreeTabsToggle<CR>
vnoremap <silent> <leader>f		:<NERDTreeTabsToggleCR>
inoremap <silent> <leader>f		:<NERDTreeTabsToggleCR>

"Delete unused buffers
noremap <silent> <leader>b		:BufOnly<CR>
vnoremap <silent> <leader>b		:Bufonly<CR>
inoremap <silent> <leader>b		:BufOnly<CR>

"source .vimrc with leader-v
noremap <silent> <leader>v		:source ~/.vimrc<CR>
vnoremap <silent> <leader>v		:source ~/.vimrc<CR>
inoremap <silent> <leader>v		:source ~/.vimrc<CR>

"ctrl-s to save
noremap <silent> <C-S>		:update<CR>
vnoremap <silent> <C-S>		<C-C>:update<CR>
inoremap <silent> <C-S>		<C-O>:update<CR>

"leader-n to turn off search hightlights
noremap <silent> <leader>n		:nohlsearch<CR>
vnoremap <silent> <leader>n		:nohlsearch<CR>
inoremap <silent> <leader>n		:nohlsearch<CR>

"leader-2 to switch to solid background
noremap <silent> <leader>2		:colorschem lucius<CR>
vnoremap <silent> <leader>2		:colorschem lucius<CR>
inoremap <silent> <leader>2		:colorschem lucius<CR>

"leader-1 to switch to transparent background
noremap <silent> <leader>1		:colorschem ron<CR>
vnoremap <silent> <leader>1		:colorschem ron<CR>
inoremap <silent> <leader>1		:colorschem ron<CR>

"leader-a to envoke saveas
noremap <silent> <leader>a		:saveas
vnoremap <silent> <leader>a		:saveas
inoremap <silent> <leader>a		:saveas


"make buffers act like tabs
set hidden
nmap <leader>t :enew<cr>
nmap <leader>l :bnext<CR>
nmap <leader>h :bprevious<CR>
nmap <leader>w :bp <BAR> bd #<CR>

"Ultisnips/YouCompleteMe/SuperTab setting
" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-b>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-y>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'
"let g:UltiSnipsSnippetDir = '/home/jason/UltiSnips'

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

"Airline settings
set laststatus=2
let g:airline_powerline_fonts=1
let g:airline_theme='base16_default'
let g:airline#extensions#tabline#enabled=1
let g:airline#extensions#tabline#fnamemod = ':t'


"NERDTree stuff
"let g:NERDTreeIndicatorMapCustom = {
    "\ "Modified"  : "M",
    "\ "Staged"    : "*",
    "\ "Untracked" : "!T",
    "\ "Renamed"   : "R",
    "\ "Unmerged"  : "!M",
    "\ "Deleted"   : "D",
    "\ "Dirty"     : "P",
    "\ "Clean"     : "C",
    "\ 'Ignored'   : 'I',
    "\ "Unknown"   : "?"
    "\ }
"let g:NERDTreeDirArrowExpandable = '>'
"let g:NERDTreeDirArrowCollapsible = '^'
let NERDTreeQuitOnOpen=1

"Syntastic settings
let g:syntastic_go_checkers = ['golint']
let g:syntastic_javascript_checkers = ['jshint']

set mouse=a

function! MakeSession()
  let b:sessiondir = $HOME . "/.vim/sessions" . getcwd()
  if (filewritable(b:sessiondir) != 2)
	exe 'silent !mkdir -p ' b:sessiondir
	redraw!
  endif
  let b:filename = b:sessiondir . '/session.vim'
  exe "mksession! " . b:filename
endfunction

function! LoadSession()
  let b:sessiondir = $HOME . "/.vim/sessions" . getcwd()
  let b:sessionfile = b:sessiondir . "/session.vim"
  if (filereadable(b:sessionfile))
	exe 'source ' b:sessionfile
  else
	echo "No session loaded."
  endif
endfunction
au VimEnter * nested :call LoadSession()
au VimLeave * :call MakeSession()

"Colorscheme
"set background=light
colorscheme ron

highlight Pmenu ctermbg=138 
